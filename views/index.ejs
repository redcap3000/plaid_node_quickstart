<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<title>Plaid Quickstart Example</title>
<link rel="stylesheet" href="https://threads.plaid.com/threads.css">
<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.24.0/moment.min.js"></script>
<link rel="stylesheet" type="text/css" href="style.css">
<meta name="viewport" content="width=device-width, initial-scale=1">
</head>
<body>
  <main class="main">
    <div class="grid">
      <div class="grid__column grid__column--is-twelve-columns">
        <div id="banner" class="everpresent-content">
          <h1 class="everpresent-content__heading">Account Summary</h1>
          <p id="intro" class="everpresent-content__subheading">
            An example application that outlines an end-to-end integration with Plaid
          </p>
         
          <div id="cashIn" class="everpresent-content__subheading item-data-row__left cashIn">
          </div>
          <div id="cashOut" class="everpresent-content__subheading item-data-row__center cashOut">
          </div>
          <div id="cashNet" class="everpresent-content__subheadingitem-data-row__center cashNet">
          </div>
        </div>

        <div id="container" class="initial-view">
          <p class="initial-view__description">
            Click the button below to open a list of Institutions. After you select one, youâ€™ll be guided through an authentication process. Upon completion, you'll recieve an access_token. You may want to bookmark the page it redirects to that will contain your access token to avoid repeating the process
          </p>

          <button id="link-btn" class="button button--is-primary" disabled>Connect with Plaid</button>
          <div class="loading-indicator"></div>
        </div>

        <div id="app" class="connected-view">

          <div class="box" id="main_display">

            <!-- transaction grouping counts? -->

            <!-- Identity -->
            

          </div>

        </div>
      </div>
    </div>
  </main>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/2.2.3/jquery.min.js"></script>
  <script src="https://cdn.plaid.com/link/v2/stable/link-initialize.js"></script>
  <script>
  (function($) {
    // global vars for reference elsewhere (eventually depreciating JQUERY BS)
    transactionData=true
    transactionData2=true

    // for comparisons

    thisR = false
    lastR = false
    twoRAgo = false

    // Handles redirect from the oauth response page for the oauth flow.
    if (document.referrer != null && document.referrer.includes('http://localhost:8000/oauth-response.html')) {
      $('#container').fadeOut('fast', function() {
        $('#item_id').text('<%= ITEM_ID %>');
        $('#access_token').text('<%= ACCESS_TOKEN %>');
        $('#intro').hide();
        $('#app, #steps').fadeIn('slow');
      });
    }


    var products = '<%= PLAID_PRODUCTS %>'.split(',');
    if (products.includes('assets')) {
      $('#assets').show();
    }

    var linkHandlerCommonOptions = {
      apiVersion: 'v2',
      clientName: 'Plaid Quickstart',
      env: '<%= PLAID_ENV %>',
      product: products,
      key: '<%= PLAID_PUBLIC_KEY %>',
      countryCodes: '<%= PLAID_COUNTRY_CODES %>'.split(','),
    };
    var oauthRedirectUri = '<%= PLAID_OAUTH_REDIRECT_URI %>';
    if (oauthRedirectUri != '') {
      linkHandlerCommonOptions.oauthRedirectUri = oauthRedirectUri;
    }
    var oauthNonce = '<%= PLAID_OAUTH_NONCE %>';
    if (oauthNonce != '') {
      linkHandlerCommonOptions.oauthNonce = oauthNonce;
    }
    // This functionality is only relevant for the UK Payment Initiation product.
    if (products.includes('payment_initiation')) {
      $('.payment_initiation').show();
      $.post('/set_payment_token', {}, function(data) {
        var paymentToken = data.paymentToken;
        $('#payment_token').text(paymentToken);

        // In the case of payment_initiation product, we need to wait for
        // payment token to be generated before the Link handler can be
        // initialized.
        handler = Plaid.create({
          ...linkHandlerCommonOptions,
          paymentToken: paymentToken,
          language: 'en',
          onSuccess: function(public_token) {
            // This public token exchange step is not relevant for the
            // payment_initiation product and should be skipped.
            $.post('/get_access_token', {
              public_token: public_token
            }, function(data) {
              $('#container').fadeOut('fast', function() {
                $('#item_id').text(data.item_id);
                $('#access_token').text(data.access_token);
                $('#intro').hide();
                $('#app, #steps').fadeIn('slow');
              });
            });
          },
        });
        $('#link-btn').attr('disabled', false);
        $('.loading-indicator').hide();
      });
    } else {
      var handler = Plaid.create({
        ...linkHandlerCommonOptions,
        // webhook: 'https://your-domain.tld/plaid-webhook',
        onSuccess: function(public_token) {
          $.post('/get_access_token', {
            public_token: public_token
          }, function(data) {
             $(location).attr('href',window.location.href+'?access_token='+data.access_token);
          });
        },
      });
      $('#link-btn').attr('disabled', false);
      $('.loading-indicator').hide();
    }

    var accessToken = qs('access_token');
    if (accessToken != null && accessToken != '') {
      $.post('/set_access_token', {
        access_token: accessToken
      }, function(data) {
        $('#container').fadeOut('fast', function() {
          $('#item_id').text(data.item_id);
          $('#access_token').text(accessToken);
          $('#intro').hide();
          $('#app, #steps').fadeIn('slow');
        });
      });
    }

    $('#link-btn').on('click', function(e) {
      handler.open();
    });

    $('#get-identity-btn').on('click', function(e) {
      $.get('/identity', function(data) {
        $('#get-identity-data').slideUp(function() {
          if (data.error != null) {
            displayError(this, data.error);
            return;
          }
          var html = '';
          data.identity.accounts.forEach(function(account, idx) {
            html += '<tr><td><strong>' + account.name + '</strong></td></tr>';
            html += '<tr class="response-row response-row--is-identity"><td><strong>Names</strong></td><td><strong>Emails</strong></td><td><strong>Phone numbers</strong></td><td><strong>Addresses</strong></td></tr><tr class="response-row response-row--is-identity">';
            account.owners.forEach(function(identityData, idx) {
              html += '<tr><td>';
              identityData.names.forEach(function(name, idx) {
                html += name + '<br />';
              });
              html += '</td><td>';
              identityData.emails.forEach(function(email, idx) {
                html += email.data + '<br />';
              });
              html += '</td><td>';
              identityData.phone_numbers.forEach(function(number, idx) {
                html += number.data + '<br />';
              });
              html += '</td><td>';
              identityData.addresses.forEach(function(address, idx) {
                html += address.data.street + '<br />';
                html += address.data.city + ', ' + address.data.region + ' ' + address.data.postal_code;
              });
              html += '</td></tr>';
            })
          })
          $(this).html(html).slideDown();
        });
      });
    });

    $('#get-item-btn').on('click', function(e) {
      $.get('/item', function(data) {
        $('#get-item-data').slideUp(function() {
          if (data.error) {
            displayError(this, data.error);
          } else {
            var html = '';
            html += '<tr><td>Institution name</td><td>' + data.institution.name + '</td></tr>';
            html += '<tr><td>Billed products</td><td>' + data.item.billed_products.join(', ') + '</td></tr>';
            html += '<tr><td>Available products</td><td>' + data.item.available_products.join(', ') + '</td></tr>';

            $(this).html(html).slideDown();
          }
        });
      });
    });
    /*
        TRANSACTIONS
    */
    $('#get-transactions-btn').on('click', function(e) {
      $.get('/transactions?access_token='+qs('access_token'), function(data) {
        transactionData = data
            transactionCheckLoop()
        if (data.error != null && data.error.error_code != null) {
          // Format the error
          var errorHtml = '<div class="inner"><p>' +
           '<strong>' + data.error.error_code + ':</strong> ' +
           (data.error.display_message == null ? data.error.error_message : data.error.display_message)  + '</p></div>';

        
          // Render the error
          $('#get-transactions-data').slideUp(function() {
            $(this).slideUp(function() {
              $(this).html(errorHtml).slideDown();
            });
          });
        } else {
          $('#get-transactions-data').slideUp(function() {
            var html = '<tr><td><strong>Name</strong></td><td><strong>Amount</strong></td><td><strong>Date</strong></td></tr>';
            data.transactions.transactions.forEach(function(txn, idx) {
              html += '<tr>';
              html += '<td>' + txn.name + '</td>';
              html += '<td>$' + txn.amount + '</td>';
              html += '<td>' + txn.date + '</td>';
              html += '</tr>';
            });

            $(this).slideUp(function() {
              $(this).html(html).slideDown();
            });
          });
        }
      });
    });
  


  })(jQuery);

function qs(key) {
    key = key.replace(/[*+?^$.\[\]{}()|\\\/]/g, "\\$&"); // escape RegEx meta chars
    var match = location.search.match(new RegExp("[?&]"+key+"=([^&]+)(&|$)"));
    return match && decodeURIComponent(match[1].replace(/\+/g, " "));
}

function displayError(element, error) {
  var html = `
    <div class="alert alert-danger">
      <p><strong>Error Code:</strong> ${error.error_code}</p>
      <p><strong>Error Type:</strong> ${error.error_type}</p>
      <p><strong>Error Message:</strong> ${error.display_message == null ? error.error_message : error.display_message}</p>
      <div>Check out our <a href="https://plaid.com/docs/#errors-overview">errors documentation</a> for more information.</div>
    </div>`;
  $(element).html(html).slideDown();
}

function buildDiv(className,inner){
    var d = document.createElement('div')
    d.className = className
    d.innerHTML = (typeof inner != 'undefined' ? inner:'')
    return d
}

function dateAnalysis(range){
/* use to get date ranges for comparisons
   returns current range,range before, and range - 2
    ex : this year,last year and year before
       : this month, last month and month before
*/
  if(typeof range == 'undefined'){
    range = 'years'
  }else if(range != 'months' && range != 'weeks' && range != 'days'){
    console.log("invalid range")
    return false
  } 
  var t = getDateRange(range,moment())

  var thisR = t[0]
  var lastR = t[1]

  t = getDateRange(range,lastR[0])

  var twoRAgo = t[1]
    
  console.table(thisR)
  console.table(lastR)
  console.table(twoRAgo)
  return [
    thisR,
    lastR,
    twoRAgo
  ]
  // compare [thisYear,lastYear]
  //           [thisYear,twoYearsAgo]
}

transactionComparisons={}
function fetchCompareTransactions(range){
  var thisR = range[0]
  var lastR = range[1]
  var twoRAgo = range[2]
  var access_token = qs('access_token')
  if(typeof access_token != 'undefined' && access_token){
    var buildQ = function(r){
      return '?access_token=' + access_token + '&startDate='+r[0].format('YYYY-MM-DD')+'&endDate='+r[1].format('YYYY-MM-DD')
    }
    $.get('/transactions'+buildQ(thisR),function(firstSet){
      // check # of transactions if eq to 500 then attempt to fetch more
      tfCompare(firstSet,thisR)
      $.get('/transactions'+buildQ(lastR),function(secondSet){
        tfCompare(secondSet,lastR)
        $.get('/transactions'+buildQ(twoRAgo),function(thirdSet){
          tfCompare(thirdSet,twoRAgo)
        })
      })
    })
  }else{
    console.log("No access token.")
  }  
}

fetchCompareTransactions(dateAnalysis())

function getDateRange(len,date){
  // give date and length (month,year,week ?)
  if(typeof len == 'undefined'){
    // default to month
    len = 'month'
  }
  if(typeof date == 'undefined'){
    date = moment()
  }
  var startOf = moment(date).startOf(len)
  
  var endOf = moment(startOf).endOf(len)

  var startOfLast = moment(startOf).subtract(1,len).startOf(len)

  var endOfLast = moment(startOfLast).endOf(len)
  
  return [
    [startOf,endOf],
    [startOfLast,endOfLast]
  ]

}
// for filtering transactions
fieldFilter = ['category','date','name','amount','payment_channel','pending']


// timeframe compare compares this week vs last week, this month vs last month, this year vs last year
function tfCompare(transactionData,tf){
  var trxCollection = transactionData.transactions.transactions
  var preFilterCollection = []
  if(trxCollection.length > 0){
  
    trxCollection.filter(function(trx){
      var preFilter = {}
      for(var field in trx){
        if(fieldFilter.indexOf(field) > -1){
          preFilter[field]=true
          if(field == 'name'){
            // text transformation
            preFilter[field] = trx[field].split(' ')
               .map(w => w[0].toUpperCase() + w.substr(1).toLowerCase())
               .join(' ')
          }else if(field == 'category'){
            preFilter[field] = trx[field].join(',')

          }else{
            preFilter[field] = trx[field]
          }
        }
      }
      preFilterCollection.push(preFilter)
    })
  }

   // build common categories
    var transactionCats={}
    var transactionCatsTotals={}
    var transactionCatsTitles={}
    
    preFilterCollection.filter(function(t){
      console.table(t)
      var cat = t.category
      
      // look for a comma in the name..
      var name_proc = t.name.split(',')
      if(name_proc.length > 1){
        // looking for 'Direct Deposit' and 'Direct Withdrawal'
        console.log(name_proc)
        // proll sanitize/normalize string too
        if(name_proc[0] == 'Direct Deposit' || name_proc[0] == 'Direct Withdrawal'){
          console.log(t.name)
          t.name = name_proc.unshift()
          console.log(t.name)
        }
      }

      if(typeof transactionCats[cat] == 'undefined'){
        // find similar category? 
        console.log(cat + ' : ' + t.name)
        transactionCats[cat] = 1
        transactionCatsTotals[cat] = t.amount
        transactionCatsTitles[cat] = []
        transactionCatsTitles[cat].push(t.name)
      }else{
        transactionCats[cat] += 1
        transactionCatsTotals[cat] += t.amount
        var idxChk = transactionCatsTitles[cat].indexOf(t.name)
        // checking for duplicate transactions to modify the title name
        // rather than more elements
          transactionCatsTitles[cat].push(t.name)
      }


    })

    // process duplicate transaction titles
    for(var cat in transactionCatsTitles){
        transactionCatsTitles[cat] = (transactionCatsTitles[cat].every( (val, i, arr) => val === arr[0] ) ?transactionCatsTitles[cat][0] : transactionCatsTitles[cat])
    }

    // vars for total cash in / cash out
    // deposits
    var cashIn = 0
    // withdrawl
    var cashOut = 0
    // group based on commas
    transactionGrouping= {}
    for(var cat in transactionCats){
      var cats = cat.split(',')
      var actionGrp = cats[0]
      var typeGrp = cats[1]
      if(typeof transactionGrouping[actionGrp] == 'undefined'){
        transactionGrouping[actionGrp] = []
      }
      var temp = {}
      temp['type']= typeGrp
      temp['count'] = transactionCats[cat]
      temp['total'] = transactionCatsTotals[cat]
      if(temp['total'] < 0){
        cashIn += temp['total']
      }else{
        cashOut += temp['total']
        
      }
      temp['transactions'] = transactionCatsTitles[cat]
      transactionGrouping[actionGrp].push(temp)
      // should i do the dom updating here?
    }
     var div = buildDiv('item-data-row')
     // cash in cash net plus date range of record summary
     //div.appendChild(buildDiv('item-data-row__left cashIn',Math.abs(cashIn)))
     
     var leftDiv = buildDiv('item-data-row__left')
     leftDiv.appendChild(buildDiv('item-data-row__nicename cashOut',cashOut.toFixed(2) + '&nbsp;'))
     
     leftDiv.appendChild(buildDiv('item-data-row__nicename cashIn',Math.abs(cashIn).toFixed(2)))
      
      div.appendChild(leftDiv)
     
     div.appendChild(buildDiv('item-data-row__center',tf[0].format('MM-DD-YY') + ' to ' + tf[1].format('MM-DD-YY') ))
     div.appendChild(buildDiv('item-data-row__left cashNet',(cashOut-Math.abs(cashIn)).toFixed(2)))

     document.getElementById('main_display').appendChild(div)

     for(var action in transactionGrouping){
              transactionGrouping[action].filter(function(grp){
                var div = buildDiv('item-data-row')
                var divLeft = buildDiv('item-data-row__left')
                divLeft.appendChild(
                  // group count
                    buildDiv('item-data-row__request-type ',grp.count)
                )
                var divLeftAction = buildDiv('item-data-row__request-type ' + action[0]+action[1],action[0]+action[1])
                divLeft.appendChild(divLeftAction)
                div.appendChild(divLeft)
                var divCenter = buildDiv('item-data-row__center')
                // grouping type                
                divCenter.appendChild(buildDiv('item-data-row__nicename',grp.type))
                
               // group title/transactions
                divCenter.appendChild(
                  buildDiv('item-data-row__description',grp.transactions)
                )
                div.appendChild(divCenter)
                var divRight = buildDiv('item-data-row__right')
                // dollar amount
                divRight.appendChild(
                  buildDiv('item-data-row__request-type',grp.total.toFixed(2))
                )
                div.appendChild(divRight)
                document.getElementById('main_display').appendChild(div)
              })
            }

}
function transactionCompare(){
    
    if(typeof transactionData2 != 'undefined'){
      // transform.
      if(transactionData2.error == null){
        if(typeof transactionData2.transactions != 'undefined'){
          if(typeof transactionData2.transactions.transactions != 'undefined'){
            if(typeof transactionData != 'undefined' && typeof transactionData.transactions){
              // being mega conservative here...

            }
          }
        }
      }
    }
}


</script>
</body>
</html>
