<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<title>Plaid Quickstart Example</title>
<link rel="stylesheet" href="https://threads.plaid.com/threads.css">

<link rel="stylesheet" type="text/css" href="style.css">
<meta name="viewport" content="width=device-width, initial-scale=1">
</head>
<body>
  <main class="main">
    <div class="grid">
      <div class="grid__column grid__column--is-twelve-columns">
        <div id="banner" class="everpresent-content">
          <h1 class="everpresent-content__heading">Account Summary</h1>
          <p id="intro" class="everpresent-content__subheading">
            An example application that outlines an end-to-end integration with Plaid
          </p>
         
          <div id="cashIn" class="everpresent-content__subheading item-data-row__left cashIn">
          </div>
          <div id="cashOut" class="everpresent-content__subheading item-data-row__center cashOut">
          </div>
          <div id="cashNet" class="everpresent-content__subheadingitem-data-row__center cashNet">
          </div>
        </div>

        <div id="container" class="initial-view">
          <p class="initial-view__description">
            Click the button below to open a list of Institutions. After you select one, youâ€™ll be guided through an authentication process. Upon completion, you'll recieve an access_token. You may want to bookmark the page it redirects to that will contain your access token to avoid repeating the process
          </p>

          <button id="link-btn" class="button button--is-primary" disabled>Connect with Plaid</button>
          <div class="loading-indicator"></div>
        </div>

        <div id="app" class="connected-view">

          <div class="box">

            <!-- transaction grouping counts? -->

            <div class="item-data-row" id="transactionGrouping">

            </div>

            <!--Transactions -->
            <div class="item-data-row">
              <div class="item-data-row__left">
                <div class="item-data-row__request-type">post</div>
              </div>
              <div class="item-data-row__center">
                <div class="item-data-row__nicename">Transactions</div>
                <div class="item-data-row__endpoint">/transactions/get</div>
                <div class="item-data-row__description">Retrieve transactions for credit and depository accounts.</div>
              </div>
              <div class="item-data-row__right">
                <button id="get-transactions-btn" class="button button--is-small button--is-default button--is-full-width">Send request</button>
              </div>
              <div class="item-data-row__response">
                <table><tbody id="get-transactions-data"></tbody></table>
              </div>
            </div>

            <!-- Identity -->
            <div class="item-data-row">
              <div class="item-data-row__left">
                <div class="item-data-row__request-type">post</div>
              </div>
              <div class="item-data-row__center">
                <div class="item-data-row__nicename">Identity</div>
                <div class="item-data-row__endpoint">/identity/get</div>
                <div class="item-data-row__description">Retrieve Identity information on file with the bank. Reduce fraud by comparing user-submitted data to validate identity.</div>
              </div>
              <div class="item-data-row__right">
                <button id="get-identity-btn" class="button button--is-small button--is-default button--is-full-width">Send request</button>
              </div>
              <div class="item-data-row__response">
                <table><tbody id="get-identity-data"></tbody></table>
              </div>
            </div>

            <!-- Balance -->
            <div class="item-data-row">
              <div class="item-data-row__left">
                <div class="item-data-row__request-type">post</div>
              </div>
              <div class="item-data-row__center">
                <div class="item-data-row__nicename">Balance</div>
                <div class="item-data-row__endpoint">/accounts/balance/get</div>
                <div class="item-data-row__description">Check balances in real time to prevent non-sufficient funds fees.</div>
              </div>
              <div class="item-data-row__right">
                <button id="get-balance-btn" class="button button--is-small button--is-default button--is-full-width">Send request</button>
              </div>
              <div class="item-data-row__response">
                <table><tbody id="get-balance-data"></tbody></table>
              </div>
            </div>

          </div>

        </div>
      </div>
    </div>
  </main>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/2.2.3/jquery.min.js"></script>
  <script src="https://cdn.plaid.com/link/v2/stable/link-initialize.js"></script>
  <script>
  (function($) {
    // global vars for reference elsewhere (eventually depreciating JQUERY BS)
    transactionData=true
    // Handles redirect from the oauth response page for the oauth flow.
    if (document.referrer != null && document.referrer.includes('http://localhost:8000/oauth-response.html')) {
      $('#container').fadeOut('fast', function() {
        $('#item_id').text('<%= ITEM_ID %>');
        $('#access_token').text('<%= ACCESS_TOKEN %>');
        $('#intro').hide();
        $('#app, #steps').fadeIn('slow');
      });
    }


    var products = '<%= PLAID_PRODUCTS %>'.split(',');
    if (products.includes('assets')) {
      $('#assets').show();
    }

    var linkHandlerCommonOptions = {
      apiVersion: 'v2',
      clientName: 'Plaid Quickstart',
      env: '<%= PLAID_ENV %>',
      product: products,
      key: '<%= PLAID_PUBLIC_KEY %>',
      countryCodes: '<%= PLAID_COUNTRY_CODES %>'.split(','),
    };
    var oauthRedirectUri = '<%= PLAID_OAUTH_REDIRECT_URI %>';
    if (oauthRedirectUri != '') {
      linkHandlerCommonOptions.oauthRedirectUri = oauthRedirectUri;
    }
    var oauthNonce = '<%= PLAID_OAUTH_NONCE %>';
    if (oauthNonce != '') {
      linkHandlerCommonOptions.oauthNonce = oauthNonce;
    }
    // This functionality is only relevant for the UK Payment Initiation product.
    if (products.includes('payment_initiation')) {
      $('.payment_initiation').show();
      $.post('/set_payment_token', {}, function(data) {
        var paymentToken = data.paymentToken;
        $('#payment_token').text(paymentToken);

        // In the case of payment_initiation product, we need to wait for
        // payment token to be generated before the Link handler can be
        // initialized.
        handler = Plaid.create({
          ...linkHandlerCommonOptions,
          paymentToken: paymentToken,
          language: 'en',
          onSuccess: function(public_token) {
            // This public token exchange step is not relevant for the
            // payment_initiation product and should be skipped.
            $.post('/get_access_token', {
              public_token: public_token
            }, function(data) {
              $('#container').fadeOut('fast', function() {
                $('#item_id').text(data.item_id);
                $('#access_token').text(data.access_token);
                $('#intro').hide();
                $('#app, #steps').fadeIn('slow');
              });
            });
          },
        });
        $('#link-btn').attr('disabled', false);
        $('.loading-indicator').hide();
      });
    } else {
      var handler = Plaid.create({
        ...linkHandlerCommonOptions,
        // webhook: 'https://your-domain.tld/plaid-webhook',
        onSuccess: function(public_token) {
          $.post('/get_access_token', {
            public_token: public_token
          }, function(data) {
            $('#container').fadeOut('fast', function() {
              $('#item_id').text(data.item_id);
              $('#access_token').text(data.access_token);
              $('#intro').hide();
              $('#app, #steps').fadeIn('slow');
            });
          });
        },
      });
      $('#link-btn').attr('disabled', false);
      $('.loading-indicator').hide();
    }

    var accessToken = qs('access_token');
    if (accessToken != null && accessToken != '') {
      $.post('/set_access_token', {
        access_token: accessToken
      }, function(data) {
        $('#container').fadeOut('fast', function() {
          $('#item_id').text(data.item_id);
          $('#access_token').text(accessToken);
          $('#intro').hide();
          $('#app, #steps').fadeIn('slow');
        });
      });
    }

    $('#link-btn').on('click', function(e) {
      handler.open();
    });

    $('#get-accounts-btn').on('click', function(e) {
      $.get('/accounts', function(data) {

        $('#get-accounts-data').slideUp(function() {
          if (data.error != null) {
            displayError(this, data.error);
            return;
          }
          var html = '<tr><td><strong>Name</strong></td><td><strong>Balances</strong></td><td><strong>Subtype</strong></td><td><strong>Mask</strong></td></tr>';
          data.accounts.accounts.forEach(function(account, idx) {
            html += '<tr>';
            html += '<td>' + account.name + '</td>';
            html += '<td>$' + (account.balances.available != null ? account.balances.available : account.balances.current) + '</td>';
            html += '<td>' + account.subtype + '</td>';
            html += '<td>' + account.mask + '</td>';
            html += '</tr>';
          });

          $(this).html(html).slideDown();
        });
      });
    });

 

    $('#get-identity-btn').on('click', function(e) {
      $.get('/identity', function(data) {
        $('#get-identity-data').slideUp(function() {
          if (data.error != null) {
            displayError(this, data.error);
            return;
          }
          var html = '';
          data.identity.accounts.forEach(function(account, idx) {
            html += '<tr><td><strong>' + account.name + '</strong></td></tr>';
            html += '<tr class="response-row response-row--is-identity"><td><strong>Names</strong></td><td><strong>Emails</strong></td><td><strong>Phone numbers</strong></td><td><strong>Addresses</strong></td></tr><tr class="response-row response-row--is-identity">';
            account.owners.forEach(function(identityData, idx) {
              html += '<tr><td>';
              identityData.names.forEach(function(name, idx) {
                html += name + '<br />';
              });
              html += '</td><td>';
              identityData.emails.forEach(function(email, idx) {
                html += email.data + '<br />';
              });
              html += '</td><td>';
              identityData.phone_numbers.forEach(function(number, idx) {
                html += number.data + '<br />';
              });
              html += '</td><td>';
              identityData.addresses.forEach(function(address, idx) {
                html += address.data.street + '<br />';
                html += address.data.city + ', ' + address.data.region + ' ' + address.data.postal_code;
              });
              html += '</td></tr>';
            })
          })
          $(this).html(html).slideDown();
        });
      });
    });

    $('#get-item-btn').on('click', function(e) {
      $.get('/item', function(data) {
        $('#get-item-data').slideUp(function() {
          if (data.error) {
            displayError(this, data.error);
          } else {
            var html = '';
            html += '<tr><td>Institution name</td><td>' + data.institution.name + '</td></tr>';
            html += '<tr><td>Billed products</td><td>' + data.item.billed_products.join(', ') + '</td></tr>';
            html += '<tr><td>Available products</td><td>' + data.item.available_products.join(', ') + '</td></tr>';

            $(this).html(html).slideDown();
          }
        });
      });
    });
    /*
        TRANSACTIONS
    */
    $('#get-transactions-btn').on('click', function(e) {
      $.get('/transactions', function(data) {
        transactionData = data
        if (data.error != null && data.error.error_code != null) {
          // Format the error
          var errorHtml = '<div class="inner"><p>' +
           '<strong>' + data.error.error_code + ':</strong> ' +
           (data.error.display_message == null ? data.error.error_message : data.error.display_message)  + '</p></div>';

          if (data.error.error_code === 'PRODUCT_NOT_READY') {
            // Add additional context for `PRODUCT_NOT_READY` errors
            errorHtml += '<div class="inner"><p>Note: The PRODUCT_NOT_READY ' +
             'error is returned when a request to retrieve Transaction data ' +
             'is made before Plaid finishes the <a href="https://plaid.com/' +
             'docs/quickstart/#transaction-data-with-webhooks">initial ' +
             'transaction pull.</a></p></div>';
          }
          // Render the error
          $('#get-transactions-data').slideUp(function() {
            $(this).slideUp(function() {
              $(this).html(errorHtml).slideDown();
            });
          });
        } else {
          $('#get-transactions-data').slideUp(function() {
            var html = '<tr><td><strong>Name</strong></td><td><strong>Amount</strong></td><td><strong>Date</strong></td></tr>';
            data.transactions.transactions.forEach(function(txn, idx) {
              html += '<tr>';
              html += '<td>' + txn.name + '</td>';
              html += '<td>$' + txn.amount + '</td>';
              html += '<td>' + txn.date + '</td>';
              html += '</tr>';
            });

            $(this).slideUp(function() {
              $(this).html(html).slideDown();
            });
          });
        }
      });
    });

    $('#get-balance-btn').on('click', function(e) {
      $.get('/balance', function(data) {
        $('#get-balance-data').slideUp(function() {
          if (data.error != null) {
            displayError(this, data.error);
            return;
          }
          var balanceData = data.balance;
          var html = '<tr><td><strong>Name</strong></td><td><strong>Balance</strong></td><td><strong>Subtype</strong></td><td><strong>Mask</strong></td></tr>';
          balanceData.accounts.forEach(function(account, idx) {
            html += '<tr>';
            html += '<td>' + account.name + '</td>';
            html += '<td>$' + (account.balances.available != null ? account.balances.available : account.balances.current) + '</td>'
            html += '<td>' + account.subtype + '</td>';
            html += '<td>' + account.mask + '</td>';
            html += '</tr>';
          });

          $(this).html(html).slideDown();
        });
      });
    });


  })(jQuery);

function qs(key) {
    key = key.replace(/[*+?^$.\[\]{}()|\\\/]/g, "\\$&"); // escape RegEx meta chars
    var match = location.search.match(new RegExp("[?&]"+key+"=([^&]+)(&|$)"));
    return match && decodeURIComponent(match[1].replace(/\+/g, " "));
}

function displayError(element, error) {
  var html = `
    <div class="alert alert-danger">
      <p><strong>Error Code:</strong> ${error.error_code}</p>
      <p><strong>Error Type:</strong> ${error.error_type}</p>
      <p><strong>Error Message:</strong> ${error.display_message == null ? error.error_message : error.display_message}</p>
      <div>Check out our <a href="https://plaid.com/docs/#errors-overview">errors documentation</a> for more information.</div>
    </div>`;
  $(element).html(html).slideDown();
}


// to check for available 'transactions' in a global var 
// forcing restart restarts the interval and will probably *should* reapply the transformations
transactionInterval = false
function transactionCheckLoop(start)
{
  console.log('transactionCheckLoop ' + start)
  if(typeof start == 'undefined'){
    if(typeof transactionData != 'undefined'){
      // transform.
      if(transactionData.error == null){
        if(typeof transactionData.transactions != 'undefined'){
          // update dom here
          /*
          transactions.transactions.forEach(function(txn, idx) {
              html += '<tr>';
              html += '<td>' + txn.name + '</td>';
              html += '<td>$' + txn.amount + '</td>';
              html += '<td>' + txn.date + '</td>';
              html += '</tr>';
            });
          */
          if(typeof transactionData.transactions.transactions != 'undefined'){
            var trxCollection = transactionData.transactions.transactions
            var preFilterCollection = []
            if(trxCollection.length > 0){
              var fieldFilter = ['category','date','name','amount','payment_channel','pending']
              trxCollection.filter(function(trx){
                var preFilter = {}
                for(var field in trx){
                  if(fieldFilter.indexOf(field) > -1){
                    preFilter[field]=true
                    if(field == 'name'){
                      // text transformation
                      preFilter[field] = trx[field].split(' ')
                         .map(w => w[0].toUpperCase() + w.substr(1).toLowerCase())
                         .join(' ')
                    }else if(field == 'category'){
                      preFilter[field] = trx[field].join(',')

                    }else{
                      preFilter[field] = trx[field]
                    }
                  }
                }
                preFilterCollection.push(preFilter)
              })
            }
            // build common categories
            transactionCats={}
            transactionCatsTotals={}
            transactionCatsTitles={}
            
            preFilterCollection.filter(function(t){
              var cat = t.category
              if(typeof transactionCats[cat] == 'undefined'){
                transactionCats[cat] = 1
                transactionCatsTotals[cat] = t.amount
                transactionCatsTitles[cat] = []
                transactionCatsTitles[cat].push(t.name)
              }else{
                transactionCats[cat] += 1
                transactionCatsTotals[cat] += t.amount
                var idxChk = transactionCatsTitles[cat].indexOf(t.name)
                // checking for duplicate transactions to modify the title name
                // rather than more elements
                  transactionCatsTitles[cat].push(t.name)
              }


            })

            // process duplicate transaction titles
            for(var cat in transactionCatsTitles){
                transactionCatsTitles[cat] = (transactionCatsTitles[cat].every( (val, i, arr) => val === arr[0] ) ?transactionCatsTitles[cat][0] : transactionCatsTitles[cat])
            }
            // vars for total cash in / cash out
            // deposits
            cashIn = 0
            // withdrawl

            cashOut = 0
            // group based on commas
            transactionGrouping= {}
            for(var cat in transactionCats){
              var cats = cat.split(',')
              var actionGrp = cats[0]
              var typeGrp = cats[1]
              if(typeof transactionGrouping[actionGrp] == 'undefined'){
                transactionGrouping[actionGrp] = []
              }
              var temp = {}
              temp['type']= typeGrp
              temp['count'] = transactionCats[cat]
              temp['total'] = transactionCatsTotals[cat]
              if(temp['total'] < 0){
                cashIn += temp['total']
              }else{
                cashOut += temp['total']
                
              }
              temp['transactions'] = transactionCatsTitles[cat]


              transactionGrouping[actionGrp].push(temp)
            }
            console.log(transactionGrouping)
            // update dom
            //#transactionGrouping
            document.getElementById('cashIn').innerHTML = ''

            document.getElementById('cashIn').innerHTML = 'In<br/>$ ' + Math.abs(cashIn).toFixed(2)


            document.getElementById('cashOut').innerHTML = ''


            document.getElementById('cashOut').innerHTML = 'Out<br/>$ ' + cashOut.toFixed(2)


            document.getElementById('cashNet').innerHTML = 'Net<br/>$ ' + (Math.abs(cashIn) - cashOut).toFixed(2)


            
            document.getElementById('transactionGrouping').innerHTML=''
            for(var action in transactionGrouping){
              var grouping = transactionGrouping[action]
              //var groupingDiv = document.createElement('div')
              //groupingDiv.className = 'item-data-row__cente'
              

              /*

               <div class="item-data-row__center">
                <div class="item-data-row__nicename">Transactions</div>
                <div class="item-data-row__endpoint">/transactions/get</div>
                <div class="item-data-row__description">Retrieve transactions for credit and depository accounts.</div>
              </div>

              */

              //groupingDiv.innerHTML = action
              //document.getElementById('transactionGrouping').appendChild(groupingDiv)
              // item-data-row__left
              
              grouping.filter(function(grp){
                var type = grp.type
                var count = grp.count
                var div = document.createElement('div')
                div.className = 'item-data-row'
                
                var divLeft = document.createElement('div')
                divLeft.className = 'item-data-row__left'

              
                


                var divLeftAction = document.createElement('div')
                divLeftAction.className = 'item-data-row__request-type ' + action[0]+action[1]

                divLeftAction.innerHTML = action[0]+action[1]

                divLeft.appendChild(divLeftAction)
                //div.innerHTML = type + ' : ' + count
                
                var divCenter = document.createElement('div')
                divCenter.className = 'item-data-row__center'

                //request-type
                var groupingType = document.createElement('div')
                groupingType.className = 'item-data-row__nicename'
                groupingType.innerHTML = type

                divCenter.appendChild(groupingType)
                
                var groupTransactionTitle = document.createElement('div')
                groupTransactionTitle.className = 'item-data-row__description'
                groupTransactionTitle.innerHTML = grp.transactions

                divCenter.appendChild(groupTransactionTitle)
              
                var divRight = document.createElement('div')
                divRight.className = 'item-data-row__right'


              

                var dollarAmount = document.createElement('div')
                dollarAmount.className = 'item-data-row__request-type'
                dollarAmount.innerHTML = grp.total
                
                divRight.appendChild(dollarAmount)
                
                var groupCount = document.createElement('div')
                groupCount.className = 'item-data-row__request-type ' 
                groupCount.innerHTML = count

                divLeft.appendChild(groupCount)
                //divCenter.appendChild(groupingLeftRowDiv)
                div.appendChild(divLeft)
                div.appendChild(divCenter)

                div.appendChild(divRight)
                
                document.getElementById('transactionGrouping').appendChild(div)
              })
            }
              

          }
          return clearInterval(transactionInterval)
        }
      }
    }
    return false
  }else{
    transactionInterval = setInterval(transactionCheckLoop,1000 * 5)
    return true
  }
}
transactionIntervalStatus = transactionCheckLoop(true) 
</script>
</body>
</html>
